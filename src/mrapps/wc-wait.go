package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import (
	crand "crypto/rand"
	"math/big"
	"strconv"
	"strings"
	"time"
	"unicode"

	"../mr"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func maybeWait(isMap bool) {
	max := big.NewInt(1000)
	rr, _ := crand.Int(crand.Reader, max)
	if rr.Int64() < 500 {
		if isMap {
			// delay for a while
			time.Sleep(time.Duration(time.Second * 2))
		} else {
			// reducef should not wait for too long because reduce work for evry key.
			// 10ms will fail for a long long time.
			time.Sleep(time.Duration(time.Millisecond * 1))
		}
	}
}
func Map(filename string, contents string) []mr.KeyValue {
	maybeWait(true)
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	maybeWait(false)
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
